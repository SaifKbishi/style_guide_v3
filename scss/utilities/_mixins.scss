// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors
@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries
@mixin mq($break) {
  @if $break == "large" {
    @media (min-width: $brkpoint-lg + 1){
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md +1) {
      @content;
    }
  }
  @else if $break == "small" {
    @media (min-width: $brkpoint-sm) {
      @content;
    }
  }
}

// Generate modifier color classes
@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;
		}
	}
}

// Generate modifier grid colors classes
@mixin grid-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme}.theme__colors{
        background-color: $color;
      }
	}
}

// Image replacement
@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

// Adjacent sibling margins
@mixin doubly($margin: 1em) {
	& + & {
	  margin-left: $margin;
    @content;
	}
}
//Flexbox mixin
@mixin flex ($display: flex, $dir: null, $wrap: null, $just: null){
    display: $display;
    flex-direction: $dir;
    flex-wrap: $wrap;
    justify-content: $just;
    @content;
}

// Grid Columns
@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}
